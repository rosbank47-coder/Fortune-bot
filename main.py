import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = "7989282401:AAGCSDdo4EmecdmexTrSXNm2tHrhy6EpuvM"  # —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ================= –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =================
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/horoscope"), KeyboardButton(text="/fortune")],
        [KeyboardButton(text="/palm"), KeyboardButton(text="/tarot")],
        [KeyboardButton(text="/love"), KeyboardButton(text="/compatibility")],
        [KeyboardButton(text="/year"), KeyboardButton(text="/ask")]
    ],
    resize_keyboard=True
)

# ================= START =================
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å.\n\n"
        "üîÆ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        " ‚Ä¢ /horoscope ‚Äì –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
        " ‚Ä¢ /fortune ‚Äì —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ\n"
        " ‚Ä¢ /ask ‚Äì –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä (–∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å)\n\n"
        "üíé –ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ (–ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã):\n"
        " ‚Ä¢ /palm ‚Äì –≥–∞–¥–∞–Ω–∏–µ –ø–æ —Ä—É–∫–µ\n"
        " ‚Ä¢ /tarot ‚Äì —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ\n"
        " ‚Ä¢ /love ‚Äì –ª—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
        " ‚Ä¢ /compatibility ‚Äì —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
        " ‚Ä¢ /year ‚Äì –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑",
        reply_markup=menu_kb
    )

# ================= FREE SERVICES =================
@dp.message(Command("horoscope"))
async def horoscope_cmd(message: types.Message):
    horoscopes = [
        "–°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã –æ–±–µ—â–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚ú®",
        "–í–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞ üåô",
        "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äì —É–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ üöÄ",
        "–ü—Ä–æ—è–≤–∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ —Ç–µ–±—è –∂–¥—ë—Ç –Ω–∞–≥—Ä–∞–¥–∞ üçÄ",
        "–°–µ–≥–æ–¥–Ω—è —Å—Ç–æ–∏—Ç –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏ üîÆ",
    ]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –ø—Ä–æ–≥–Ω–æ–∑ üîÑ", callback_data="horoscope_again")]]
    )
    await message.answer(random.choice(horoscopes), reply_markup=kb)

@dp.callback_query(lambda c: c.data == "horoscope_again")
async def horoscope_again(callback: types.CallbackQuery):
    horoscopes = [
        "–£–ª—ã–±–∫–∞ –∏ –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞ –æ—Ç–∫—Ä–æ—é—Ç —Ç–µ–±–µ –¥–æ—Ä–æ–≥—É üòä",
        "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ üë•",
        "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –æ—Ç–¥—ã—Ö–µ üßò",
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—Ç—Å—è –±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–æ üí∞",
        "–í–µ—á–µ—Ä–æ–º —Ç–µ–±—è –∂–¥—ë—Ç –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ üéÅ"
    ]
    await callback.message.answer(random.choice(horoscopes))

# -------- Fortune
@dp.message(Command("fortune"))
async def fortune_cmd(message: types.Message):
    fortunes = [
        "–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏—à—å –≤–∞–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üë§",
        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–∏—Ç –ø–ª–∞–Ω—ã üìå",
        "–¢–µ–±—è –∂–¥—ë—Ç –ø—Ä–∏—è—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
        "–°–∫–æ—Ä–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—Å—è –∑–∞–≤–µ—Ç–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ üå†",
    ]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ï—â—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üîÆ", callback_data="fortune_again")]]
    )
    await message.answer(random.choice(fortunes), reply_markup=kb)

@dp.callback_query(lambda c: c.data == "fortune_again")
async def fortune_again(callback: types.CallbackQuery):
    fortunes = [
        "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∏–¥–µ—è —Å—Ç–∞–Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º üí°",
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—Å–ø–µ—Ö —É–∂–µ –±–ª–∏–∑–∫–æ üíµ",
        "–¢–µ–±–µ —É–ª—ã–±–Ω—ë—Ç—Å—è —Å—É–¥—å–±–∞ üåà",
        "–ò—Å–ø–æ–ª—å–∑—É–π —à–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è üîë"
    ]
    await callback.message.answer(random.choice(fortunes))

# ================= PREMIUM (NOT AVAILABLE YET) =================
async def premium_unavailable(message: types.Message, service_name: str):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (—Å–∫–æ—Ä–æ)", callback_data="unlock_soon")]]
    )
    await message.answer(f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ ¬´{service_name}¬ª –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. üîí\n\n–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ—ë –ø–æ–¥–∫–ª—é—á–∏—Ç—å!", reply_markup=kb)

@dp.message(Command("palm"))
async def palm_service(message: types.Message):
    await premium_unavailable(message, "–ì–∞–¥–∞–Ω–∏–µ –ø–æ —Ä—É–∫–µ")

@dp.message(Command("tarot"))
async def tarot_service(message: types.Message):
    await premium_unavailable(message, "–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ")

@dp.message(Command("love"))
async def love_service(message: types.Message):
    await premium_unavailable(message, "–õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø")

@dp.message(Command("compatibility"))
async def compatibility_service(message: types.Message):
    await premium_unavailable(message, "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")

@dp.message(Command("year"))
async def year_service(message: types.Message):
    await premium_unavailable(message, "–ì–æ–¥–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑")

@dp.callback_query(lambda c: c.data == "unlock_soon")
async def unlock_soon(callback: types.CallbackQuery):
    await callback.message.answer("üí° –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π!\n–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ üîÆ")

# ================= YES / NO GAME =================
@dp.message(Command("ask"))
async def ask_cmd(message: types.Message):
    await message.answer("üé± –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")

@dp.message()
async def yes_no_game(message: types.Message):
    if message.text.startswith("/"):  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        return
    answers = [
        "‚úÖ –î–∞!",
        "‚ùå –ù–µ—Ç!",
        "ü§î –í–æ–∑–º–æ–∂–Ω–æ...",
        "‚ú® –í—Å—ë –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö!",
        "‚öñÔ∏è –®–∞–Ω—Å—ã —Ä–∞–≤–Ω—ã.",
        "üåü –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ.",
    ]
    await message.answer(random.choice(answers))

# ================= RUN =================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
